// escopo: é o local que definimos uma variavel. ele dita aonde aquela variavel sera visivel ou não
// escopo da função: variáveis definidas dentro de uma função só irão ser reconhecidas dentro daquela função, daquele escopo
exemplo:

function message() {
    let message = 'ola, tudo bem?'
    message // retorna a mensagem
}
message // retorna erro


// escopo de bloco: variáveis definidas dentro de blocos {} só serão reconhecidas naquele bloco
ex:

let dia = 3
if (dia>3) {
    let msg = 'ola'
}
console.log(dia) // retorna 3
console.log(msg) // retorna erro

// escopo lexical: uma função dentro de outra função tem acesso as variavéis da função pai
ex:

function roubo() {
    let valorroubo = 1000
    function reportagemroubo() {
        console.log(`Foram roubados ${valorroubo} reais do banco`)
    }
    reportagemroubo()
}


// function expression: maneira diferente de definir uma função
convencional (maneira 1):
function soma(x,y) {
    return x+y;
}

maneira 2:
const soma = function (x,y) {
    return x+y;
}

soma()

// high order functions: funções que operam com outras funções, podendo retornar uma função ou usar funções como argumentos
function rodar2vezes(func) {
    func()
    func()
}

function quadrado() {
    console.log(2*2)
}

rodar2vezes(quadrado); //retorna 4 duas vezes

// returning functions
function roleta () {
    let baladamorte = Math.ceil((Math.random() * 5 + 1))
    let sorteado = Math.ceil((Math.random() * 5 + 1))
    console.log(sorteado)
    console.log(baladamorte)
    if (sorteado === baladamorte) {
        return function() {
            console.log('voce morreu, que pena! deseja tentar sair vivo novamente?')
            console.log(sorteado)
        } 
    } else {
        return function () {
            console.log('voce saiu vivo, mas ninguém sabe a próxima vez')
            console.log(sorteado)
        }
    }
} 

// definining methods
todo método é uma função, mas nem toda função é um método (método são funções que podem ser adicionadas a objetos, por exempo .toUpperCase())
exemplo:
    let myMethods {
        quadrado: function (x) {return x**2},
        cubo: function (x) {return x**3}
    }


//this keyword in methods
usado para acessar propriedades naquele objeto
ex:
    let gabriel = {
        primeiro: 'Gabriel',
        ultimo: 'Teixeira',
        fullname() {return console.log(`${this.primeiro} ${this.ultimo}`)
    }
    gabriel.fullname() -> retorna Gabriel Teixeira

o this depende do contexto da função, como ela é chamada

const fullnamegabriel = gabriel.fullname; 
fullnamegabriel() //retorna undefined undefined, pois não está se referindo ao objeto gabriel, e sim ao window object (objeto geral nativo do js)

try {
    código
} catch (err) {
    código caso haja erro
}